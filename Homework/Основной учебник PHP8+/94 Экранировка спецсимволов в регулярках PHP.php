<?php
//
/*
 * Список специальных символов и обычных
Если экранировать обычный символ - ничего страшного не случится - он все равно будет обозначать сам себя. Исключение - цифры, их нельзя экранировать.

Часто возникает сомнение, является ли данный символ специальным. Некоторые доходят до того, что экранируют все подозрительные символы подряд. Однако, это плохая практика (захламляет регулярку обратными слешами).

Являются спецсимволами: $ ^ . * + ? \ / {} [] () |

Не являются спецсимволами: @ : , ' " ; - _ = < > % # ~ ` & !
 */

//1 Напишите регулярку, которая найдет строку 'a.a', не захватив остальные.
$str = 'a.a aba aea';
echo preg_replace('#a\.a#', '!', $str);

//2  Напишите регулярку, которая найдет строку '2+3', не захватив остальные.
$str = '2+3 223 2223';
echo preg_replace('#2\+3#', '!', $str);

//3
//Напишите регулярку, которая найдет строки '2+3', '2++3', '2+++3', не захватив остальные (+ может быть любое количество).
$str = '23 2+3 2++3 2+++3 345 567';
echo preg_replace('#2\++3#', '!', $str);
//4
// Напишите регулярку, которая найдет строки '23', '2+3', '2++3', '2+++3', не захватив остальные.
$str = '23 2+3 2++3 2+++3 345 567';
echo preg_replace('#2\+*3#', '!', $str);

//5 Напишите регулярку, которая найдет строки '*q+', '*qq+', '*qqq+', не захватив остальные.
$str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
echo preg_replace('#\*q+\+#', '!', $str);
//6 Напишите регулярку, которая найдет строки в квадратных скобках и заменят их на '!'.
$str = '[abc] {abc} abc (abc) [abc]';
echo preg_replace('#\[...]#', '!', $str);

$arrr = '[abc] {abc} abc (abc) [abc]';
echo preg_replace('#[[a-c]+]#','!',$arrr);

